// swiftlint:disable all
{% if colors %}
{% macro rgbaHex color %}0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}}{% endmacro %}
{% macro rgbHexString color %}#{{color.red}}{{color.green}}{{color.blue}}{% endmacro %}
{% macro rgbaHexString color %}{% call rgbHexString color %}{{color.alpha}}{% endmacro %}
{% macro rgbString color %}{{color.red|hexToInt}} {{color.green|hexToInt}} {{color.blue|hexToInt}}{% endmacro %}
{% macro rgbaString color %}{% call rgbString color %}, {{color.alpha|hexToInt|int255toFloat|percent}}{% endmacro %}
{% macro colorName color %}{{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endmacro %}
import UIKit.UIColor

public enum Colors {
{% for color in colors %}

    /// {{color.name}}
    ///
    /// Hex: {% call rgbaHexString color %}; rgba: {% call rgbaString color %}.
    public static let {% call colorName color %} = UIColor(rgbaHex: {% call rgbaHex color %})
{% endfor %}
}

private extension UIColor {

    convenience init(rgbaHex: UInt32) {
        self.init(
            red: CGFloat((rgbaHex >> 24) & 0xFF) / 255.0,
            green: CGFloat((rgbaHex >> 16) & 0xFF) / 255.0,
            blue: CGFloat((rgbaHex >> 8) & 0xFF) / 255.0,
            alpha: CGFloat(rgbaHex & 0xFF) / 255.0
        )
    }
}
{% else %}
// No color found
{% endif %}
// swiftlint:enable all
