// swiftlint:disable all
{% if textStyles %}
{% macro rgbaHex color %}0x{{color.red}}{{color.green}}{{color.blue}}{{color.alpha}}{% endmacro %}
{% macro rgbHexString color %}#{{color.red}}{{color.green}}{{color.blue}}{% endmacro %}
{% macro rgbaHexString color %}{% call rgbHexString color %}{{color.alpha}}{% endmacro %}
{% macro rgbString color %}{{color.red|hexToInt}} {{color.green|hexToInt}} {{color.blue|hexToInt}}{% endmacro %}
{% macro rgbaString color %}{% call rgbString color %}, {{color.alpha|hexToInt|int255toFloat|percent}}{% endmacro %}
{% macro colorValue color %}hex: {% call rgbaHexString color %}; rgba: {% call rgbaString color %}{% endmacro %}
{% macro colorStyle color %}{% if color.name %}{{color.name}}; {% endif %}{% endmacro %}
{% macro colorDescription color %}{% call colorStyle color %}{% call colorValue color %}{% endmacro %}
{% macro fontName textStyle %}{{textStyle.fontFamily}} ({{textStyle.fontPostScriptName}}); {% endmacro %}
{% macro fontWeight textStyle %}weight {{textStyle.fontWeight}}; {% endmacro %}
{% macro fontSize textStyle %}size {{textStyle.fontSize}}{% endmacro %}
{% macro fontDescription textStyle %}{% call fontName textStyle %}{% call fontWeight textStyle %}{% call fontSize textStyle %}{% endmacro %}
{% macro textStyleName textStyle %}{{textStyle.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{% endmacro %}
import Foundation
import UIKit

public struct TextStyle: Equatable {

    public let font: UIFont
    public let textColor: UIColor
    public let paragraphSpacing: CGFloat?
    public let paragraphIndent: CGFloat?
    public let lineHeight: CGFloat?
    public let letterSpacing: CGFloat?

    public var actualLineHeight: CGFloat {
        return lineHeight ?? font.lineHeight
    }

    public init(
        font: UIFont,
        textColor: UIColor,
        paragraphSpacing: CGFloat? = nil,
        paragraphIndent: CGFloat? = nil,
        lineHeight: CGFloat? = nil,
        letterSpacing: CGFloat? = nil
    ) {
        self.font = font
        self.textColor = textColor
        self.paragraphSpacing = paragraphSpacing
        self.paragraphIndent = paragraphIndent
        self.lineHeight = lineHeight
        self.letterSpacing = letterSpacing
    }

    public init(
        fontName: String,
        fontSize: CGFloat,
        textColor: UIColor,
        paragraphSpacing: CGFloat? = nil,
        paragraphIndent: CGFloat? = nil,
        lineHeight: CGFloat? = nil,
        letterSpacing: CGFloat? = nil
    ) {
        self.init(
            font: UIFont(name: fontName, size: fontSize) ?? UIFont.systemFont(ofSize: fontSize),
            textColor: textColor,
            paragraphSpacing: paragraphSpacing,
            paragraphIndent: paragraphIndent,
            lineHeight: lineHeight,
            letterSpacing: letterSpacing
        )
    }

    public func withTextColor(_ textColor: UIColor) -> TextStyle {
        return TextStyle(
            font: font,
            textColor: textColor,
            paragraphSpacing: paragraphSpacing,
            paragraphIndent: paragraphIndent,
            lineHeight: lineHeight,
            letterSpacing: letterSpacing
        )
    }

    public func attributes(
        textColor: UIColor? = nil,
        backgroundColor: UIColor? = nil,
        alignment: NSTextAlignment? = nil,
        lineBreakMode: NSLineBreakMode? = nil,
        ignoringParagraphStyle: Bool = false
    ) -> [NSAttributedString.Key: Any] {
        var attributes: [NSAttributedString.Key: Any] = [
            .font: font,
            .foregroundColor: textColor ?? self.textColor,
        ]

        if let backgroundColor = backgroundColor {
            attributes[.backgroundColor] = backgroundColor
        }

        if let letterSpacing = letterSpacing {
            attributes[.kern] = NSNumber(value: Float(letterSpacing))
        }

        if ignoringParagraphStyle {
            return attributes
        }

        let paragraphStyle = NSMutableParagraphStyle()

        if let lineHeight = lineHeight {
            let paragraphLineSpacing = (lineHeight - font.lineHeight) / 2.0
            let paragraphLineHeight = lineHeight - paragraphLineSpacing

            paragraphStyle.lineSpacing = paragraphLineSpacing
            paragraphStyle.minimumLineHeight = paragraphLineHeight
            paragraphStyle.maximumLineHeight = paragraphLineHeight
        }

        if let paragraphSpacing = paragraphSpacing {
            paragraphStyle.paragraphSpacing = paragraphSpacing
        }

        if let paragraphIndent = paragraphIndent {
            paragraphStyle.firstLineHeadIndent = paragraphIndent
        }

        if let alignment = alignment {
            paragraphStyle.alignment = alignment
        }

        if let lineBreakMode = lineBreakMode {
            paragraphStyle.lineBreakMode = lineBreakMode
        }

        attributes[.paragraphStyle] = paragraphStyle

        return attributes
    }
}

public extension TextStyle {
{% for textStyle in textStyles %}

    /// {{textStyle.name}}
    ///
    /// Font: {% call fontDescription textStyle %}
    /// Text color: {% call colorDescription textStyle.textColor %}
    /// Paragraph spacing: {{textStyle.paragraphSpacing|default:"default"}}
    /// Paragraph indent: {{textStyle.paragraphIndent|default:"default"}}
    /// Line height: {{textStyle.lineHeight|default:"default"}}
    /// Letter spacing: {{textStyle.letterSpacing|default:"default"}}
    static let {% call textStyleName textStyle %} = TextStyle(
        fontName: "{{textStyle.fontPostScriptName}}",
        fontSize: {{textStyle.fontSize}},
        textColor: UIColor(rgbaHex: {% call rgbaHex textStyle.textColor %}),
        paragraphSpacing: {{textStyle.paragraphSpacing|default:"nil"}},
        paragraphIndent: {{textStyle.paragraphIndent|default:"nil"}},
        lineHeight: {{textStyle.lineHeight|default:"nil"}},
        letterSpacing: {{textStyle.letterSpacing|default:"nil"}}
    )
{% endfor %}
}

public extension String {

    func styled(
        _ textStyle: TextStyle,
        textColor: UIColor? = nil,
        backgroundColor: UIColor? = nil,
        alignment: NSTextAlignment? = nil,
        lineBreakMode: NSLineBreakMode? = nil
    ) -> NSAttributedString {
        return NSAttributedString(
            string: self,
            attributes: textStyle.attributes(
                textColor: textColor,
                backgroundColor: backgroundColor,
                alignment: alignment,
                lineBreakMode: lineBreakMode
            )
        )
    }
}

private extension UIColor {

    convenience init(rgbaHex: UInt32) {
        self.init(
            red: CGFloat((rgbaHex >> 24) & 0xFF) / 255.0,
            green: CGFloat((rgbaHex >> 16) & 0xFF) / 255.0,
            blue: CGFloat((rgbaHex >> 8) & 0xFF) / 255.0,
            alpha: CGFloat(rgbaHex & 0xFF) / 255.0
        )
    }
}
{% else %}
// No text style found
{% endif %}
// swiftlint:enable all
